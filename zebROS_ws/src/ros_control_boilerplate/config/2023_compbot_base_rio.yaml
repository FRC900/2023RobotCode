# ros_control_boilerplate Settings -----------------------
# Settings for ros_control control loop
generic_hw_control_loop:
  loop_hz: 100 # 100
  cycle_time_error_threshold: 0.01
  canifier_read_hz: 100
  cancoder_read_hz: 100
  #some processes have lower frequencies than the main control loop
  ctre_mc_read_hz: 100
  pcm_read_hz: 20
  pdh_read_hz: 20
  pdp_read_hz: 20
  ph_read_hz: 20
  robot_iteration_hz: 20
  spark_max_read_hz: 20
  joystick_read_hz: 50
  match_data_read_hz: 1 # 2
  robot_controller_read_hz: 10 # 20
  as726x_read_hz: 7

# Settings for ros_control hardware interface
# Map a name for each valid joint to a CAN id
# For future expansion, change hw_id to specify one
# of several types of HW interface : CAN_id, PWM_id, DIO_id, AIO_id, etc.
hardware_interface:
   joints:
       # 2022 joints
       #
       # Solenoids which are updated from controllers on the Jetson need
       # to be configured here so they can write to hardware attached
       # to the Rio

       # Need a single CTRE hardware device defined so the Rio 
       # broadcasts keepalive / enable signals.  Without this, talons
       # controlled by the Jetson won't run. Use an unused CAN Id so that
       # the Rio sending 0'd control frames to it won't interfere with
       # operation of real Talons
       - {name: dummy_talon, type: can_talon_srx, local: false}

       # Add 2023 solenoids/digital inputs
       
       - {name: pdh, type: pdh, module: 1}

       - {name: joystick0, type: joystick, id: 0, local: true}
       - {name: button_box, type: joystick, id: 1, local: true}
         #- {name: joystick2, type: joystick, id: 2, local: true}
         #- {name: joystick_rumble0, type: rumble, rumble_port: 0}
         #- {name: joystick_rumble2, type: rumble, rumble_port: 2}
       - {name: robot_code_ready_jetson, local: false, type: ready}
       - {name: robot_code_ready_rio, local: true, type: ready}

# Create controllers for each joint
#
# Entry is the name of the controller. It can be anything.
# It will create a namespace with that name under the main
# controller namespace. Subscribed topics for that controller
# will be most often show up under
# <top level controller manager ns>/<controller ns>/topic
# e.g.
# /frcrobot/joint1_talon_controller/command
# /frcrobot/joint2_talon_controller/command
# /frcrobot/talon_states
#
# This one creates the /talon_states topic necessary in ROS
# It doesn't actually control anything, just takes the internal
# encoder state used by the hw manager and publishes it as
# a ROS topic.  This is generic ROS stuff, so we'll have
# to figure out what to map e.g. effort to in the Talon world
talon_state_controller_rio:
   type:         talon_state_controller/TalonStateController
   publish_rate: 100
talon_config_controller:
   type:         talon_config_controller/TalonConfigController
   publish_rate: 5

# Similar to above, but this one prints non-Talon state
# (stuff that fits into the more standard ROS position/
# speed/effort paradigm)
joint_state_controller_rio:
   type:         joint_state_controller/JointStateController
   publish_rate: 100

# Used to listen for joint state published from the given topic
# (in this case the Jetson) and copy them to internal copies of
# joint data
joint_state_listener_controller:
    type:      state_listener_controller/JointStateListenerController
    topic:     /frcrobot_jetson/joint_states

match_state_controller:
   type:         match_state_controller/MatchStateController
   publish_rate: 20

pcm_state_controller:
   type : pcm_state_controller/PCMStateController
   publish_rate: 20

robot_controller_state_controller:
   type: robot_controller_state_controller/RobotControllerStateController
   publish_rate: 20

joystick_controller:
    type: joystick_state_controller/JoystickStateController
    name: joystick0
    publish_rate: 50

spacemouse_controller:
    type: spacemouse_state_controller/SpacemouseStateController
    name: joystick0
    publish_rate: 50

joystick2_controller:
    type: joystick_state_controller/JoystickStateController
    name: joystick2
    publish_rate: 50

button_box_controller:
    type: button_box_state_controller/ButtonBoxStateController
    name: button_box
    publish_rate: 50

pdh_state_controller:
   type:         pdh_state_controller/PDHStateController
   publish_rate: 20
   things_plugged_in_pdh_channel:
        ["", #id 1
         "", #id 2
         "", #id 3
         "", #id 4
         "", #id 5
         "", #id 6
         "", #id 7
         "", #id 8
         "", #id 9
         "", #id 10
         "", #id 11
         "", #id 12
         "", #id 13
         "", #id 14
         "", #id 15
         "", #id 16
         "", #id 17
         "", #id 18
         "", #id 19
         "", #id 20
         "", #id 21
         "", #id 22
         "", #id 23
         ""  #id 24
        ]