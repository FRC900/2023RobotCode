# ros_control_boilerplate Settings -----------------------
# Settings for ros_control control loop
generic_hw_control_loop:
  loop_hz: 100
  cycle_time_error_threshold: 0.01
  cycle_time_error_threshold: 0.01
  canifier_read_hz: 100
  cancoder_read_hz: 100
  #some processes have lower frequencies than the main control loop
  ctre_mc_read_hz: 100
  pcm_read_hz: 20
  pdh_read_hz: 20
  pdp_read_hz: 20
  ph_read_hz: 20
  robot_iteration_hz: 20
  spark_max_read_hz: 20
  joystick_read_hz: 50
  match_data_read_hz: 2
  robot_controller_read_hz: 10 # 20
  as726x_read_hz: 7

# Settings for ros_control hardware interface
# Map a name for each valid joint to a CAN id
# For future expansion, change hw_id to specify one
# of several types of HW interface : CAN_id, PWM_id, DIO_id, AIO_id, etc.
hardware_interface:
   joints:
       # Add a single unused talon on the rio to make sure keepalive signals are sent
       #- {name: pdp, local: true, type: pdp }
       #- {name: pcm, local: true, type: pcm, pcm_id: 0}
       #- {name: as726x, local: true, type: as726x, port: mxp, address: 73 } # 73 = 0x49
       - {name: do1, local: true, type: digital_output, dio_channel: 1}
       - {name: do2, local_update: false, local_hardware: true, type: digital_output, dio_channel: 2}
       - {name: joystick0, type: joystick, id: 0 }
       - {name: green_led, local: true, type: digital_output, dio_channel: 4}

       - {name: robot_code_ready_jetson, local: false, type: ready}
       - {name: robot_code_ready_rio, local: true, type: ready}
       - {name: button_box, type: joystick, id: 1, local: true}

button_box_controller:
    type: button_box_state_controller_2023/ButtonBoxStateController_2023
    name: button_box
    publish_rate: 50
       
joint_state_controller:
   type:         joint_state_controller/JointStateController
   publish_rate: 100

joystick_controller:
    type: joystick_state_controller/JoystickStateController
    name: joystick0
    publish_rate: 50

spacemouse_controller:
    type: spacemouse_state_controller/SpacemouseStateController
    name: joystick0
    publish_rate: 50

# This one creates the /talon_states topic necessary in ROS
# It doesn't actually control anything, just takes the internal
# encoder state used by the hw manager and publishes it as
# a ROS topic.  This is generic ROS stuff, so we'll have
# to figure out what to map e.g. effort to in the Talon world
talon_state_controller:
   type:         talon_state_controller/TalonStateController
   publish_rate: 100
talon_config_controller:
   type:         talon_config_controller/TalonConfigController
   publish_rate: 100
       
pdp_state_controller:
   type:         pdp_state_controller/PDPStateController
   publish_rate: 20

pcm_state_controller:
   type : pcm_state_controller/PCMStateController
   publish_rate: 20

match_state_controller:
   type:         match_state_controller/MatchStateController
   publish_rate: 20

robot_controller_state_controller:
   type: robot_controller_state_controller/RobotControllerStateController
   publish_rate: 20

joint_state_listener_controller:
    type:      state_listener_controller/JointStateListenerController
    topic:     /frcrobot_jetson/joint_states

do1_controller:
    type: position_controllers/JointPositionController
    joint: do1

talon3_controller:
    type: talon_controllers/TalonPercentOutputController
    joint: talon3
    feedback_type: CTRE_MagEncoder_Absolute

talon9_controller:
    type: talon_controllers/TalonPercentOutputController
    joint: talon9
    feedback_type: CTRE_MagEncoder_Absolute

as726x_state_controller:
    type: as726x_state_controller/AS726xStateController
    joint_name: as726x
    publish_rate: 20

as726x_controller:
    type: as726x_controller/AS726xController
    joint_name: as726x
    ind_led_current_limit: IND_LIMIT_1MA
    ind_led_enable: false
    drv_led_current_limit: DRV_LIMIT_12MA5
    drv_led_enable: false
    conversion_type: ONE_SHOT
    channel_gain: GAIN_1X
    integration_time: 10

green_led_controller:
    type: position_controllers/JointPositionController
    joint: green_led

