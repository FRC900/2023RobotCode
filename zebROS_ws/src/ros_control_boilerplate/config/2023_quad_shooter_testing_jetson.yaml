generic_hw_control_loop:
  loop_hz: 100
  cycle_time_error_threshold: 0.01
  canifier_read_hz: 100
  cancoder_read_hz: 100
  #some processes have lower frequencies than the main control loop
  ctre_mc_read_hz: 100
  pcm_read_hz: 20
  pdh_read_hz: 20
  pdp_read_hz: 20
  ph_read_hz: 20
  robot_iteration_hz: 20
  spark_max_read_hz: 100
  joystick_read_hz: 50
  match_data_read_hz: 2
  robot_controller_read_hz: 20
  as726x_read_hz: 7


# Settings for ros_control hardware interface
# Map a name for each valid joint to a CAN id
hardware_interface:
   # Identify this as a non-Rio controller using Linux
   # socketCan device can0 to communicate
   run_hal_robot: false
   can_interface: can0
   joints:
       - {name: left_top_shooter_joint, type: talonfxpro, can_bus: CANivore, can_id: 1, local: true}
       - {name: right_top_shooter_joint, type: talonfxpro, can_bus: CANivore, can_id: 2, local: true}
       - {name: left_bottom_shooter_joint, type: talonfxpro, can_bus: CANivore, can_id: 3, local: true}
       - {name: right_bottom_shooter_joint, type: talonfxpro, can_bus: CANivore, can_id: 4, local: true}
       - {name: robot_code_ready_rio, local: false, type: ready}
       - {name: robot_code_ready_jetson, local: true, type: ready}


# This one creates the /talon_states topic necessary in ROS
# It doesn't actually control anything, just takes the internal
# encoder state used by the hw manager and publishes it as
# a ROS topic.  This is generic ROS stuff, so we'll have
# to figure out what to map e.g. effort to in the Talon world
talonfxpro_state_controller_jetson:
   type:         talonfxpro_state_controller/TalonFXProStateController
   publish_rate: 100
talonfxpro_config_controller_jetson:
   type:         talonfxpro_config_controller/TalonFXProConfigController
   publish_rate: 5

# Similar to above, but this one prints non-Talon state
# (stuff that fits into the more standard ROS position/
# speed/effort paradigm)
joint_state_controller_jetson:
   type:         joint_state_controller/JointStateController
   publish_rate: 100

# Used to listen for remote joint states published from the given topic
# (in this case the Rio) and copy them to internal copies of
# joint data
joint_state_listener_controller_jetson:
    type:      state_listener_controller/JointStateListenerController
    topic:     /frcrobot_rio/joint_states

match_state_listener_controller:
    type:      state_listener_controller/MatchStateListenerController
    topic:     /frcrobot_rio/match_data

left_top_shooter_voltage_velocity_controller:
   type: talonfxpro_controllers/TalonFXProVelocityVoltageController
   joint: left_top_shooter_joint
   invert: clockwise_positive
   close_loop_values:
      - {kP: 0.3, kI: 0.0, kD: 0.0, kV: 0.0575, kS: 0.0}
   #current_limit_continuous_amps: 15
   #current_limit_peak_amps: 25
   #current_limit_peak_msec: 50
   #current_limit_enable: True
   peak_reverse_voltage: 0
   sensor_to_mechanism_ratio: 0.5
   # voltage_closed_loop_ramp_period: 0.10
   dynamic_reconfigure: True
   neutral_mode: Coast
   forward_limit_enable: False
   reverse_limit_enable: False

right_top_shooter_voltage_velocity_controller:
   type: talonfxpro_controllers/TalonFXProVelocityVoltageController
   joint: right_top_shooter_joint
   #invert: clockwise_positive
   close_loop_values:
      - {kP: 0.3, kI: 0.0, kD: 0.0, kV: 0.0575, kS: 0.0}
   #current_limit_continuous_amps: 15
   #current_limit_peak_amps: 25
   #current_limit_peak_msec: 50
   #current_limit_enable: True
   peak_reverse_voltage: 0
   sensor_to_mechanism_ratio: 0.5
   # voltage_closed_loop_ramp_period: 0.10
   dynamic_reconfigure: True
   neutral_mode: Coast
   forward_limit_enable: False
   reverse_limit_enable: False

left_bottom_shooter_voltage_velocity_controller:
   type: talonfxpro_controllers/TalonFXProVelocityVoltageController
   joint: left_bottom_shooter_joint
   #invert: clockwise_positive
   close_loop_values:
      - {kP: 0.3, kI: 0.0, kD: 0.0, kV: 0.0575, kS: 0.0}
   #current_limit_continuous_amps: 15
   #current_limit_peak_amps: 25
   #current_limit_peak_msec: 50
   #current_limit_enable: True
   peak_reverse_voltage: 0
   sensor_to_mechanism_ratio: 0.5
   # voltage_closed_loop_ramp_period: 0.10
   dynamic_reconfigure: True
   neutral_mode: Coast
   forward_limit_enable: False
   reverse_limit_enable: False

right_bottom_shooter_voltage_velocity_controller:
   type: talonfxpro_controllers/TalonFXProVelocityVoltageController
   joint: right_bottom_shooter_joint
   invert: clockwise_positive
   close_loop_values:
      - {kP: 0.3, kI: 0.0, kD: 0.0, kV: 0.0575, kS: 0.0}
   #current_limit_continuous_amps: 15
   #current_limit_peak_amps: 25
   #current_limit_peak_msec: 50
   #current_limit_enable: True
   peak_reverse_voltage: 0
   sensor_to_mechanism_ratio: 0.5
   # voltage_closed_loop_ramp_period: 0.10
   dynamic_reconfigure: True
   neutral_mode: Coast
   forward_limit_enable: False
   reverse_limit_enable: False