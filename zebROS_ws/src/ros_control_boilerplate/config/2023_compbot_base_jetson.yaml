# ros_control_boilerplate Settings -----------------------
# Settings for ros_control control loop
generic_hw_control_loop:
  loop_hz: 100
  cycle_time_error_threshold: 0.01
  canifier_read_hz: 100
  cancoder_read_hz: 100
  #some processes have lower frequencies than the main control loop
  ctre_mc_read_hz: 100
  pcm_read_hz: 20
  pdh_read_hz: 20
  pdp_read_hz: 20
  ph_read_hz: 20
  robot_iteration_hz: 20
  spark_max_read_hz: 100
  joystick_read_hz: 50
  match_data_read_hz: 2
  robot_controller_read_hz: 20
  as726x_read_hz: 7


# Settings for ros_control hardware interface
# Map a name for each valid joint to a CAN id
# For future expansion, change hw_id to specify one
# of several types of HW interface : CAN_id, PWM_id, DIO_id, AIO_id, etc.
hardware_interface:
   # Identify this as a non-Rio controller using Linux
   # socketCan device can0 to communicate
   run_hal_robot: false
   can_interface: can0

   joints:
       # add mechanisms here

       - {name: fl_drive, type: can_talon_fx, can_bus: CANivore, can_id: 21, local: true}
       - {name: fl_angle, type: can_talon_fx, can_bus: CANivore, can_id: 11, local: true}
       - {name: fr_drive, type: can_talon_fx, can_bus: CANivore, can_id: 22, local: true}
       - {name: fr_angle, type: can_talon_fx, can_bus: CANivore, can_id: 12, local: true}
       - {name: br_drive, type: can_talon_fx, can_bus: CANivore, can_id: 24, local: true}
       - {name: br_angle, type: can_talon_fx, can_bus: CANivore, can_id: 14, local: true}
       - {name: bl_drive, type: can_talon_fx, can_bus: CANivore, can_id: 23, local: true}
       - {name: bl_angle, type: can_talon_fx, can_bus: CANivore, can_id: 13, local: true}

       - {name: four_bar_leader, type: can_talon_fx, can_bus: CANivore, can_id: 31, local: true}
       - {name: intake_leader, type: can_talon_fx, can_bus: CANivore, can_id: 41, local: true}
         #- {name: bl_angle_encoder, type: can_talon_srx, can_id: 3, local: true}
       # - {name: pcm, type: pcm, pcm_id: 0}

       - {name: robot_code_ready_jetson, local: true, type: ready}
       - {name: robot_code_ready_rio, local: false, type: ready} # Probably not really needed?

       - {name: babys_first_orchestra, type: orchestra, id: 1}

# Create controllers for each joint
#
# Entry is the name of the controller. It can be anything.
# It will create a namespace with that name under the main
# controller namespace. Subscribed topics for that controller
# will be most often show up under
# <top level controller manager ns>/<controller ns>/topic
# e.g.
# /frcrobot/joint1_talon_controller/command
# /frcrobot/joint2_talon_controller/command
# /frcrobot/talon_states

intake_leader_controller:
    type: talon_controllers/TalonPercentOutputController
    joint: intake_leader
    invert_output: False # tbd find this out
    feedback_type: IntegratedSensor
    dynamic_reconfigure: True
    voltage_compensation_Enable: True
    voltage_compensation_saturation: 12
    neutral_mode: Brake
    status_1_general_period: 100 # Default = 10
    status_2_feedback0_period: 100 # Default = 20
    status_3_quadrature_period: 250
    #status_4_aintempvbat_period: 160
    #status_6_misc_period: 0
    #status_7_commstatus_period: 0
    status_8_pulsewidth_period: 250
    status_9_motprofbuffer_period: 250
    status_10_motionmagic_period: 250
    #status_11_uartgadgeteer_period: 250
    #status_12_feedback1_period: 250
    status_13_base_pidf0_period: 250
    #status_14_turn_pidf1_period: 250
    status_15_firmwareapistatus_period: 250
    #status_17_brushless_current_period: 50

# This one creates the /talon_states topic necessary in ROS
# It doesn't actually control anything, just takes the internal
# encoder state used by the hw manager and publishes it as
# a ROS topic.  This is generic ROS stuff, so we'll have
# to figure out what to map e.g. effort to in the Talon world
talon_state_controller_jetson:
   type:         talon_state_controller/TalonStateController
   publish_rate: 100
talon_config_controller:
   type:         talon_config_controller/TalonConfigController
   publish_rate: 5

# Similar to above, but this one prints non-Talon state
# (stuff that fits into the more standard ROS position/
# speed/effort paradigm)
joint_state_controller_jetson:
   type:         joint_state_controller/JointStateController
   publish_rate: 100

# Used to listen for remote joint states published from the given topic
# (in this case the Rio) and copy them to internal copies of
# joint data
joint_state_listener_controller:
    type:      state_listener_controller/JointStateListenerController
    topic:     /frcrobot_rio/joint_states

pcm_state_controller:
   type:         pcm_state_controller/PCMStateController
   publish_rate: 20

match_state_listener_controller:
    type:      state_listener_controller/MatchStateListenerController
    topic:     /frcrobot_rio/match_data

orchestra_controller:
    type:      orchestra_controller/OrchestraController

orchestra_state_controller:
    type:   orchestra_state_controller/OrchestraStateController
    publish_rate: 10