# ros_control_boilerplate Settings -----------------------
# Settings for ros_control control loop
generic_hw_control_loop:
  loop_hz: 250
  cycle_time_error_threshold: 0.01
  canifier_read_hz: 100
  cancoder_read_hz: 100
  #some processes have lower frequencies than the main control loop
  ctre_mc_read_hz: 100
  talonfxpro_read_hz: 100
  pigeon2_read_hz: 100
  pcm_read_hz: 20
  pdh_read_hz: 20
  pdp_read_hz: 20
  ph_read_hz: 20
  robot_iteration_hz: 20
  spark_max_read_hz: 100
  joystick_read_hz: 50
  match_data_read_hz: 2
  robot_controller_read_hz: 20
  as726x_read_hz: 7

  talon_config_count_limit: 10


# Settings for ros_control hardware interface
# Map a name for each valid joint to a CAN id
# For future expansion, change hw_id to specify one
# of several types of HW interface : CAN_id, PWM_id, DIO_id, AIO_id, etc.
hardware_interface:
   # Identify this as a non-Rio controller using Linux
   # socketCan device can0 to communicate
   run_hal_robot: false
   can_interface: can0

   joints:
       - {name: fl_drive, type: talonfxpro, can_bus: CANivore, can_id: 21, local: true}
       - {name: fl_angle, type: talonfxpro, can_bus: CANivore, can_id: 11, local: true}
       - {name: fr_drive, type: talonfxpro, can_bus: CANivore, can_id: 22, local: true}
       - {name: fr_angle, type: talonfxpro, can_bus: CANivore, can_id: 12, local: true}
       - {name: br_drive, type: talonfxpro, can_bus: CANivore, can_id: 24, local: true}
       - {name: br_angle, type: talonfxpro, can_bus: CANivore, can_id: 14, local: true}
       - {name: bl_drive, type: talonfxpro, can_bus: CANivore, can_id: 23, local: true}
       - {name: bl_angle, type: talonfxpro, can_bus: CANivore, can_id: 13, local: true}
       - {name: elevator_leader, type: talonfxpro, can_bus: CANivore, can_id: 31, local: true}
       - {name: elevator_follower, type: talonfxpro, can_bus: CANivore, can_id: 32, local: true}
       - {name: four_bar, type: talonfxpro, can_bus: CANivore, can_id: 41, local: true}

       - {name: intake, type: talonfxpro, can_bus: CANivore, can_id: 51, local: true}

       - {name: note_conveyor, type: talonfxpro, can_bus: CANivore, can_id: 52, local: true}
       - {name: note_diverter, type: talonfxpro, can_bus: CANivore, can_id: 53, local: true}

       - {name: claw, type: can_talon_srx, can_bus: can0, can_id: 54, local: true}
       - {name: claw_limit_switch, type: digital_input, local: false}
       
       #- {name: pcm, type: pcm, pcm_id: 0}
       - {name: pigeon2, type: pigeon2, frame_id: pigeon2_frame, can_bus: CANivore, can_id: 0, local: true}

       - {name: candle1, can_id: 0, can_bus: CANivore, type: candle, local: true}

       - {name: babys_first_orchestra, type: orchestra, id: 1}

       - {name: robot_code_ready_jetson, local: true, type: ready}
       - {name: robot_code_ready_rio, local: false, type: ready} # Probably not really needed?

       - {name: latency_compensation, type: latency_compensation, update_frequency: 250, entries: [ {name: fl_drive, type: talonfx}, {name: fl_angle, type: talonfx}, {name: fr_drive, type: talonfx}, {name: fr_angle, type: talonfx}, {name: br_drive, type: talonfx}, {name: br_angle, type: talonfx}, {name: bl_drive, type: talonfx}, {name: bl_angle, type: talonfx}, {name: pigeon2, type: pigeon2_yaw} ] }
    #    - {name: latency_compensation, type: latency_compensation, update_frequency: 250, entries: [ {name: intake, type: talonfx} ]}

# Create controllers for each joint
#
# Entry is the name of the controller. It can be anything.
# It will create a namespace with that name under the main
# controller namespace. Subscribed topics for that controller
# will be most often show up under
# <top level controller manager ns>/<controller ns>/topic
# e.g.
# /frcrobot/joint1_talon_controller/command
# /frcrobot/joint2_talon_controller/command
# /frcrobot/talon_states

minifrc_moveit_controller:
    type: talon_position_controllers/JointTrajectoryController
    joints:
        - elevator_leader
        - elevator_follower
    elevator_leader:
        type: talonfxpro_controllers/TalonFXProPositionVoltageController
        joint: elevator_leader
        close_loop_values:
            - {kP: 550, kI: 0.000, kD: 0.00, kV: 19, kS: 0, kA: 0, kG: 0.0, gravity_type: elevator_static}
        invert: clockwise_positive

        # linear position along 
        #conversion_factor: 0.00626535
        # Linear converion - radian per / m
        sensor_to_mechanism_ratio: 159.61
        # TODO : figure out what value this should be
        # Only need one direction, to
        # prevent the elevator from running off the top
        softlimit_forward_threshold: 1.412 
        softlimit_forward_enable: True

        # CHECK THIS
        #feedback_type: IntegratedSensor

        # TODO : bottom limit switch config
        reverse_limit_switch_type: "NormallyOpen"
        reverse_limit_enable: True
        forward_limit_enable: False

        #neutral_deadband: 0.001

        neutral_mode: Brake

        dynamic_reconfigure: True

    elevator_follower:
        type: talonfxpro_controllers/TalonFXProPositionVoltageController
        joint: elevator_follower
        # DONT SET THIS FOR SIM !!! 
        #feedback_sensor_source: RemoteCANCoder
        #remote_feedback_device_id0: 21
        #neutral_deadband: 0.01
        close_loop_values:
            - {kP: 550, kI: 0.000, kD: 0.00, kV: 19, kS: 0, kA: 0, kG: 0.0, gravity_type: elevator_static}
        #invert: clockwise_positive
        neutral_deadband: 0.01
        motion_magic_cruise_velocity: 0.5
        motion_magic_acceleration: 1.0
        motion_magic_jerk: 50.0
        forward_limit_enable: False
        reverse_limit_enable: False
        dynamic_reconfigure: True
        sensor_to_mechanism_ratio: 159.61
        neutral_mode: Brake



intake_talonfxpro_controller:
    type: talonfxpro_controllers/TalonFXProDutyCycleOutController
    joint: intake
    invert: counterclockwise_positive
    dynamic_reconfigure: True
    neutral_mode: Coast

# This one creates the /talon_states topic necessary in ROS
# It doesn't actually control anything, just takes the internal
# encoder state used by the hw manager and publishes it as
# a ROS topic.  This is generic ROS stuff, so we'll have
# to figure out what to map e.g. effort to in the Talon world
talon_state_controller_jetson:
   type:         talon_state_controller/TalonStateController
   publish_rate: 100
talon_config_controller:
   type:         talon_config_controller/TalonConfigController
   publish_rate: 5

talonfxpro_state_controller:
   type:         talonfxpro_state_controller/TalonFXProStateController
   publish_rate: 100
talonfxpro_config_controller:
   type:         talonfxpro_config_controller/TalonFXProConfigController
   publish_rate: 5

# Similar to above, but this one prints non-Talon state
# (stuff that fits into the more standard ROS position/
# speed/effort paradigm)
joint_state_controller_jetson:
   type:         joint_state_controller/JointStateController
   publish_rate: 100

# Used to listen for remote joint states published from the given topic
# (in this case the Rio) and copy them to internal copies of
# joint data
joint_state_listener_controller_jetson:
    type:      state_listener_controller/JointStateListenerController
    topic:     /frcrobot_rio/joint_states

pcm_state_controller:
   type:         pcm_state_controller/PCMStateController
   publish_rate: 20

match_state_listener_controller:
    type:      state_listener_controller/MatchStateListenerController
    topic:     /frcrobot_rio/match_data

orchestra_controller:
    type:      orchestra_controller/OrchestraController

orchestra_state_controller:
    type:   orchestra_state_controller/OrchestraStateController
    publish_rate: 10

pigeon2_state_controller:
    type: pigeon2_state_controller/Pigeon2StateController
    publish_rate: 100
    joint_name: pigeon2
    compass_enable: false

pigeon2_controller:
    type: pigeon2_controller/Pigeon2Controller
    publish_rate: 20
    joint_name: pigeon2

pigeon2_imu_state_controller:
    type: imu_sensor_controller/ImuSensorController
    joint_name: pigeon2
    publish_rate: 100

candle_controller:
    type: candle_controller/CANdleController
    name: candle1

latency_compensation_state_controller:
  type: latency_compensation_state_controller/LatencyCompensationStateController
  publish_rate: 250

swerve_drive_state_controller:
    type: talon_swerve_drive_controller/SwerveDriveStateController

    publish_rate: 250

    latency_compensation_group: latency_compensation # joint name

    # These joint names must match the joint names declared for the latency compensation group
    speed: ['fl_drive', 'fr_drive', 'bl_drive', 'br_drive']
    steering: ['fl_angle', 'fr_angle', 'bl_angle', 'br_angle']

    wheel_radius: 0.0475 # m
    cmd_vel_timout: 0.5
    max_speed: 7 # Potentially raise, otherwise swerve math will limit max motor speed

    # TODO : move this into sensor_to_mechanism_ratio for Falcons
    ratio_encoder_to_rotations: 0.148148148 # Test me, will show up in odom results

    wheel_coords: [[-0.250825, 0.250825], [0.250825, 0.250825], [-0.250825, -0.250825], [0.250825, -0.250825]]

    bl_angle:
        offset: 7.53
    br_angle:
        offset: 9.041
    fl_angle:
        offset: 6.000
    fr_angle:
        offset: 12.9

note_conveyor_talonfxpro_controller:
    type: talonfxpro_controllers/TalonFXProVoltageOutputController
    joint: note_conveyor
    invert: counterclockwise_positive
    dynamic_reconfigure: True
    neutral_mode: Coast

note_diverter_talonfxpro_controller:
    type: talonfxpro_controllers/TalonFXProVoltageOutputController
    joint: note_diverter
    invert: counterclockwise_positive
    dynamic_reconfigure: True
    neutral_mode: Coast

claw_controller:
    type: talon_controllers/TalonPercentOutputController
    joint: claw
    dynamic_reconfigure: True
    voltage_compensation_Enable: True
    voltage_compensation_saturation: 13