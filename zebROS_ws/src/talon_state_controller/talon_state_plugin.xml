<library path="lib/libtalon_state_controller">
	<class name="talon_state_controller/TalonStateController" type="talon_state_controller::TalonStateController" base_class_type="controller_interface::ControllerBase">
		<description>
			The talon state controller publishes the current talon state as a talon_state_msgs/TalonState message. The talon state controller expects a TalonStateInterface type of hardware interface.
		</description>
	</class>
	<class name="state_listener_controller/TalonStateListenerController" type="state_listener_controller::TalonStateListenerController" base_class_type="controller_interface::ControllerBase">
		<description>
			Listens to talon_state messages for talons marked as remote, writes their value to the local controller
		</description>
	</class>
	<class name="talon_config_controller/TalonConfigController" type="talon_config_controller::TalonConfigController" base_class_type="controller_interface::ControllerBase">
		<description>
			The talon config controller publishes the current talon config as a talon_state_msgs/TalonConfig message. The talon config controller expects a TalonStateInterface type of hardware interface.
		</description>
	</class>
	<class name="talonfxpro_state_controller/TalonFXProStateController" type="talonfxpro_state_controller::TalonFXProStateController" base_class_type="controller_interface::ControllerBase">
		<description>
			The talonfxpro state controller publishes the current talonfxpro state as a talonfxpro_state_msgs/TalonFXProState message. The talonfxpro state controller expects a TalonFXProStateInterface type of hardware interface.
		</description>
	</class>
	<class name="talonfxpro_config_controller/TalonFXProConfigController" type="talonfxpro_config_controller::TalonFXProConfigController" base_class_type="controller_interface::ControllerBase">
		<description>
			The talonfxpro config controller publishes the current talonfxpro config as a talonfxpro_config_msgs/TalonFXProConfig message. The talonfxpro config controller expects a TalonFXProConfigInterface type of hardware interface.
		</description>
	</class>
	<class name="canifier_state_controller/CANifierStateController" type="canifier_state_controller::CANifierStateController" base_class_type="controller_interface::ControllerBase">
		<description>
			The CANifier state controller publishes the current CANifier State as a talon_state_msgs/CANifierConfig message. The CANifierState controller expects a CANifierStateInterface type of hardware interface.
		</description>
	</class>
	<class name="cancoder_state_controller/CANCoderStateController" type="cancoder_state_controller::CANCoderStateController" base_class_type="controller_interface::ControllerBase">
		<description>
			The CANCoder state controller publishes the current CANCoder State as a talon_state_msgs/CANCoderConfig message. The CANCoderState controller expects a CANCoderStateInterface type of hardware interface.
		</description>
	</class>
	<class name="candle_state_controller/CANdleStateController" type="candle_state_controller::CANdleStateController" base_class_type="controller_interface::ControllerBase">
		<description>
			The CANdle state controller publishes the current CANdle State as a talon_state_msgs/CANdleConfig message. The CANdleState controller expects a CANdleStateInterface type of hardware interface.
		</description>
	</class>
	<class name="orchestra_state_controller/OrchestraStateController" type="orchestra_state_controller::OrchestraStateController" base_class_type="controller_interface::ControllerBase">
		<description>
			The Orchestra state controller publishes the current Orchestra State as a talon_state_msgs/OrchestraState message. The OrchestraState controller expects a OrchestraStateInterface type of hardware interface.
		</description>
	</class>
	<class name="latency_compensation_state_controller/LatencyCompensationStateController" type="latency_compensation_state_controller::LatencyCompensationStateController" base_class_type="controller_interface::ControllerBase">
		<description>
			The Latency Compensation state controller publishes the current LatencyCompensation State as a talon_state_msgs/LatencyCompensationState message. The LatencyCompensationState controller expects a LatencyCompensationStateInterface type of hardware interface.
		</description>
	</class>
</library>
