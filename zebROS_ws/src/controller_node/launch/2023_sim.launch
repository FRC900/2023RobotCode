<?xml version="1.0"?>
<!--
  Simulate a omni (swerve) robot in 2023 field stage
 -->
<launch>
	<!-- useful for running sim stuff on a laptop and path follower on a jetson -->
	<arg name="joy_or_key" default="key" />
	<arg name="run_path_follower" default="True" />
	<arg name="run_hold_position" default="True" />
	<arg name="run_hold_distance" default="True" />

	<!--  ************** Global Parameters ***************  -->
	<param name="/use_sim_time" value="true"/>
	<!--  ************** Stage Simulator ***************  -->
	<node pkg="stage_ros" type="stageros" name="stageros" args="$(find controller_node)/stage/2023_charged_up.world" output="screen">
		<remap from="base_scan" to="scan"/>
		<remap from="odom" to="/frcrobot_jetson/swerve_drive_controller/odom"/>
	</node>

	<!--  ************** Nodes to convert output of stage to inputs expected by particle filter ***************  -->
	<node pkg="fake_sensors" type="fake_cmd_vel_out_node" name="fake_cmd_vel_out" >
		<remap from="cmd_vel_out" to="/frcrobot_jetson/swerve_drive_controller/cmd_vel_out"/>
	</node>

	<group ns="imu">
		<node pkg="fake_sensors" type="fake_imu_node" name="fake_imu" >
			<remap from="imu" to="/imu/imu/data" />
			<remap from="/imu/base_pose_ground_truth" to="/base_pose_ground_truth" />
		</node>

		<node pkg="imu_zero" type="imu_zero_node" name="imu_zero" >
		</node>
	</group>

	<include file="$(find controller_node)/launch/joysticks_for_simulator.launch">
		<arg name="joy_or_key" value="$(arg joy_or_key)" />
	</include>

	<!--
	<include file="$(find controller_node)/launch/fuse_odom.launch"/>
	-->
	<!--
	<node pkg="tf2_ros" type="static_transform_publisher" name="link_basetoimu" args="0 0 0 0 0 0 1 base_link imu" />
	<node pkg="tf2_ros" type="static_transform_publisher" name="static_objdetzedmap" args="0 0 0 0 0 0 zed_objdet_odom base_link" />

	-->
	<node pkg="tf" type="static_transform_publisher" name="link_basetoimu" args="0 0 0 0 0 0 1 base_link imu 100" />
	<!--From blue 0,0 to red 0,0 is the field lenght plus a 180 turn-->
	<node pkg="tf" type="static_transform_publisher" name="blue0_to_red0" args="16.458 8.228 0 3.1415926 0 0 blue0 red0 10" />
	<!-- stage publishes an odom->base_footprint transform.  Link zed_objdet_odom to odom using an identity transform.
		 Same with base_footprint to base_link
         This makes the map->zed_objdet_odom->base_link relationship from the real robot the same here, with some extra
         0,0,0... transforms tying everything together.
		 Use the TF broadcaster rather than tf2_ros since costmap2d seems to think that static transform broadcasts
         are too old to use?
	-->
	<node pkg="tf" type="static_transform_publisher" name="static_objdetzedodom" args="0 0 0 0 0 0 zed_objdet_odom odom 100" />
	<node pkg="tf" type="static_transform_publisher" name="static_basefootprintlink" args="0 0 0 0 0 0 base_footprint base_link 100" />
	<group ns="robot_state">
		<param name="robot_description" command="$(find xacro)/xacro '$(find controller_node)/urdf/2023_compbot.xacro'" />
		<node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />
	</group>

	<node pkg="fake_sensors" type="fake_goal_detect_node" name="fake_goal_detect" >
		<remap from="goal_detect_msg" to="/goal_detection/goal_detect_msg" />
	</node>
	
	<group ns="pf_localization">
	<rosparam file="$(find pf_localization)/config/2023_params.yaml" command="load"/>
	<node pkg="pf_localization" type="pf_localization_node" name="pf_localization" output="screen" >
	</node>
	</group>
	<!--
	set up cargo filter (red/blue -> friendly/opponent)
	-->
	<group ns="tf_object_detection">
		<node pkg="tf_object_detection" name="cargo_detection_filter" type="cargo_detection_filter" output="screen">
		</node>
	</group>
	<!-- 
	<include file="$(find controller_node)/launch/rosbridge_websocket.launch">
		<arg name="port" value="5803"/>
	</include>
	-->
	<!-- set up auto node to create paths -->
	<include file="$(find behaviors)/launch/auto_node.launch"/>
	<include file="$(find behaviors)/launch/2022_apriltag_shooting.launch"/>

	<include file="$(find teleop_joystick_control)/launch/2023_snap_to_angle.launch"/>

	<include file="$(find controller_node)/launch/path_follower.launch" if="$(eval arg('run_path_follower'))">
		<!--
		<arg name="odom_topic" value="/odom"/>
		-->
		<arg name="use_pose_for_odom" value="false"/>
	</include>
	<include file="$(find controller_node)/launch/hold_position.launch" if="$(eval arg('run_hold_position'))">
		<arg name="use_pose_for_odom" value="false"/>
	</include>

	<include file="$(find controller_node)/launch/distance_to_pose.launch" if="$(eval arg('run_hold_distance'))">
		<arg name="use_pose_for_odom" value="false"/>
	</include>
	<!-- Hook up cmd vel output from path follower to stage /cmd_vel topic
	-->
	<group ns="cmd_vel_mux">
		<node name="twist_mux" pkg="twist_mux" type="twist_mux">
			<rosparam command="load" file="$(find talon_swerve_drive_controller)/config/2022_twist_mux.yaml"/>
			<remap from="cmd_vel_out" to="/cmd_vel"/>
		</node>

		<node pkg="rqt_driver_station_sim" type="rqt_driver_station_sim" name="rqt_driver_station_sim" />
	</group>

	<group ns="terabee">
		<node name="x_fake_terabee" pkg="fake_sensors" type="fake_terabee_node">
			<remap from="fake_terabee_input" to="/base_scan_0" />
			<remap from="terabee" to="terabee_x" />
		</node>

		<node name="y_fake_terabee" pkg="fake_sensors" type="fake_terabee_node">
			<remap from="fake_terabee_input" to="/base_scan_1" />
			<remap from="terabee" to="terabee_y" />
		</node>
	</group>

	<include file="$(find fake_sensors)/launch/apriltag_sim.launch"/>

</launch>
