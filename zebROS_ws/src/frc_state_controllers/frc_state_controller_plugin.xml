<library path="lib/libfrc_state_controller">

	<class name="button_box_state_controller/ButtonBoxStateController" type="button_box_state_controller::ButtonBoxStateController" base_class_type="controller_interface::ControllerBase">
		<description>
			Read button box info from hardware interface and publish it
		</description>
	</class>
	<class name="button_box_state_controller_2023/ButtonBoxStateController_2023" type="button_box_state_controller::ButtonBoxStateController_2023" base_class_type="controller_interface::ControllerBase">
		<description>
			Read button box info from hardware interface and publish it (2023 buttonbox)
		</description>
	</class>
	<class name="can_bus_status_state_controller/CANBusStatusStateController" type="can_bus_status_state_controller::CANBusStatusStateController" base_class_type="controller_interface::ControllerBase">
		<description>
			Read CTRE CAN bus status state info and publish it
		</description>
	</class>
	<class name="joystick_state_controller/JoystickStateController" type="joystick_state_controller::JoystickStateController" base_class_type="controller_interface::ControllerBase">
		<description>
			Read joystick info from hardware interface and publish it
		</description>
	</class>
	<class name="spacemouse_state_controller/SpacemouseStateController" type="spacemouse_state_controller::SpacemouseStateController" base_class_type="controller_interface::ControllerBase">
		<description>
			Read spacemouse info from hardware interface and publish it
		</description>
	</class>
	<class name="joint_mode_state_controller/JointModeStateController" type="joint_mode_state_controller::JointModeStateController" base_class_type="controller_interface::ControllerBase">
		<description>
			Read joint_mode info from hardware interface and publish it
		</description>
	</class>

	<class name="match_state_controller/MatchStateController" type="match_state_controller::MatchStateController" base_class_type="controller_interface::ControllerBase">
		<description>
			Read match info from hardware interface and publish it
		</description>
	</class>

	<class name="state_listener_controller/MatchStateListenerController" type="state_listener_controller::MatchStateListenerController" base_class_type="controller_interface::ControllerBase">
		<description>
			Listens to frc_msgs::MatchData messages for joints marked as remote, writes their value to the local controller
		</description>
	</class>

	<class name="pcm_state_controller/PCMStateController" type="pcm_state_controller::PCMStateController" base_class_type="controller_interface::ControllerBase">
		<description>
			Read PCM info from hardware interface and publish it
		</description>
	</class>

	<class name="pdh_state_controller/PDHStateController" type="pdh_state_controller::PDHStateController" base_class_type="controller_interface::ControllerBase">
		<description>
			Read PDH info from hardware interface and publish it
		</description>
	</class>

	<class name="pdh_controller/PDHController" type="pdh_controller::PDHController" base_class_type="controller_interface::ControllerBase">
		<description>
			Interface for setting PDH switchable channel, and for triggering clear faults and identify PDH actions
		</description>
	</class>

	<class name="state_listener_controller/PDHStateListenerController" type="state_listener_controller::PDHStateListenerController" base_class_type="controller_interface::ControllerBase">
		<description>
			Listens to frc_msgs::PDHData messages for joints marked as remote, writes their value to the local controller
		</description>
	</class>

	<class name="pdp_state_controller/PDPStateController" type="pdp_state_controller::PDPStateController" base_class_type="controller_interface::ControllerBase">
		<description>
			Read PDP info from hardware interface and publish it
		</description>
	</class>

	<class name="state_listener_controller/PDPStateListenerController" type="state_listener_controller::PDPStateListenerController" base_class_type="controller_interface::ControllerBase">
		<description>
			Listens to frc_msgs::PDPData messages for joints marked as remote, writes their value to the local controller
		</description>
	</class>

	<class name="ph_state_controller/PHStateController" type="ph_state_controller::PHStateController" base_class_type="controller_interface::ControllerBase">
		<description>
			Read PH info from hardware interface and publish it
		</description>
	</class>

	<class name="robot_controller_state_controller/RobotControllerStateController" type="robot_controller_state_controller::RobotControllerStateController" base_class_type="controller_interface::ControllerBase">
		<description>
			Read robot controller info from hardware interface and publish it
		</description>
	</class>

	<class name="rumble_state_controller/RumbleStateController" type="rumble_state_controller::RumbleStateController" base_class_type="controller_interface::ControllerBase">
		<description>
			Read joystick rubble state info from hardware interface and publish it
		</description>
	</class>

	<class name="state_listener_controller/RumbleStateListenerController" type="state_listener_controller::RumbleStateListenerController" base_class_type="controller_interface::ControllerBase">
		<description>
			Copy remote rumble state into local hardware interface
		</description>
	</class>

	<class name="rumble_controller/RumbleController" type="rumble_controller::RumbleController" base_class_type="controller_interface::ControllerBase">
		<description>
			Send commands to joystick rumble
		</description>
	</class>

</library>
